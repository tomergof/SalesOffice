import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Comparator;
import java.util.Vector;

public class SalesOffice {
	
	private Vector <Event> events_list;
	private Vector <Employee> employees_list;
	private Vector <Customer> customers_list;
	private Vector <Order> orders_list;
	
	public SalesOffice (String fileEvents, String fileEmployees, String fileCustomers , String fileTicketsSales)
			throws IOException {
		this.events_list = Create_Events_List(fileEvents);
		this.employees_list = Create_Employees_List(fileEmployees);
		this.customers_list = Create_Customers_List(fileCustomers);
		this.orders_list = Create_Orders_List(fileTicketsSales);
	}
	
	private Vector<Event> Create_Events_List(String fileEvents) throws IOException {
		Vector<Event> events_list = new Vector<Event>();
		Vector <String[]> events;
		events = File_Reader(fileEvents);
		for (int i=1;i<events.size();i++) {
			String name = events.elementAt(i)[0];
			int ID = Integer.parseInt(events.elementAt(i)[1]);
			int price = Integer.parseInt(events.elementAt(i)[2]);
			Event new_event = new Event(name, ID, price);
			events_list.add(new_event);
		}
		return events_list;
	}
	
	private Vector<Employee> Create_Employees_List(String fileEmployees) throws IOException{
		Vector<Employee> employee_list = new Vector<Employee>();
		Vector <String[]> employee;
		employee = File_Reader(fileEmployees);
		for (int i=1;i<employee.size();i++) {
			Employee new_employee;
			int ID = Integer.parseInt(employee.elementAt(i)[0]);
			String name = employee.elementAt(i)[1];
			int age = Integer.parseInt(employee.elementAt(i)[2]);
			
			
			if (employee.elementAt(i)[3].length()!=0) {
				double bonus_rate = Double.parseDouble(employee.elementAt(i)[3]);
				new_employee = new SalesEmployee(ID, name, age, bonus_rate);
			}
			
			else {
				String phone_number = employee.elementAt(i)[4];
				new_employee = new MarketingEmployee(ID, name, age, phone_number);
			}
			employee_list.add(new_employee);
		}
		return employee_list;
	}
		
	private Vector<Customer> Create_Customers_List(String fileCustomers) throws IOException {
		Vector<Customer> customers_list = new Vector<Customer>();
		Vector <String[]> customers;
		customers = File_Reader(fileCustomers);
		for (int i=1;i<customers.size();i++) {
			int ID = Integer.parseInt(customers.elementAt(i)[0]);
			String name = customers.elementAt(i)[1];
			int age = Integer.parseInt(customers.elementAt(i)[2]);
			char gender = customers.elementAt(i)[3].charAt(0);
			int reg_by = Integer.parseInt(customers.elementAt(i)[4]);
			Customer new_customer = new Customer(ID, name, age, gender, (MarketingEmployee)this.employees_list.elementAt(reg_by-1));
			customers_list.add(new_customer);
		}
		return customers_list;
	}
	
	private Vector<Order> Create_Orders_List(String fileTicketsSales) throws IOException{
		Vector<Order> orders_list = new Vector<Order>();
		Vector <String[]> orders;
		orders = File_Reader(fileTicketsSales);
		for (int i=1;i<orders.size();i++) {
			Order new_order;
			int event_ID = Integer.parseInt(orders.elementAt(i)[0]);
			int customer_ID = Integer.parseInt(orders.elementAt(i)[1]);
			int num_of_tickets = Integer.parseInt(orders.elementAt(i)[3]);
			if (orders.elementAt(i)[2].length()!=0) {
				int sales_ID = Integer.parseInt(orders.elementAt(i)[2]);
				new_order = new OfflineOrder(this.events_list.elementAt(event_ID-1), this.customers_list.elementAt(customer_ID-1), num_of_tickets, (SalesEmployee)this.employees_list.elementAt(sales_ID-1));
			}
			else {
				String url = orders.elementAt(i)[4];
				new_order = new OnlineOrder(this.events_list.elementAt(event_ID-1), this.customers_list.elementAt(customer_ID-1), num_of_tickets, url);
			}
			orders_list.add(new_order);
		}
		return orders_list;
	}
	
	private Vector<String[]> File_Reader(String file_name) throws IOException {
		Vector<String[]> data = new Vector<String []>();
		BufferedReader inFile=null;
		try
		{
		  	FileReader fr = new FileReader (file_name);
		  	inFile = new BufferedReader (fr);	
			String line;

			while ((line = inFile.readLine()) != null) {

				String[] seperate = line.split("\t");
				data.add(seperate);
			}		
		}

		catch (FileNotFoundException exception)
		{
		 System.out.println ("The file " + file_name + " was not found.");
		}
		catch (IOException exception)
		{
		 System.out.println (exception);
		}
		finally{
			inFile.close();
		}
		return data;

	}
	
	public void PrintAgeReport (int eventID) {
		String event_name = this.events_list.elementAt(eventID-1).GetName();
		int [] ages = new int[6];
		GetAges(ages, eventID);
		int people_in_event = Count_People(ages);
		Print_Event_Ages(event_name, ages, people_in_event);
	}
	
	private void GetAges(int [] ages, int eventID) {
		for (int i=0;i<this.orders_list.size();i++) {
			if (this.orders_list.elementAt(i).GetEventID()==eventID) {
				int age = this.orders_list.elementAt(i).GetCostumer().getAge();
				Add_Age (age, ages);
			}
		}
	}
	
	private void Add_Age(int age, int[] ages) {
		if ((age>=0) &(age<=18)){
			ages[0]+=1;
		}
		else if ((age>=19) &(age<=24)){
			ages[1]+=1;
		}
		else if ((age>=25) &(age<=35)){
			ages[2]+=1;
		}
		else if ((age>=36) &(age<=50)){
			ages[3]+=1;
		}
		else if ((age>=51) &(age<=70)){
			ages[4]+=1;
		}
		else {
			ages[5]+=1;
		}
	}
	
	private int Count_People(int [] ages) {
		int people = 0;
		for (int i=0;i<ages.length;i++) {
			people+=ages[i];
		}
		return people;
	}
	
	private void Print_Event_Ages(String event_name, int[] ages, int people) {
		
		System.out.println("Event name: " +event_name);
		System.out.println("0-18: "+ages[0]/people+" %");
		System.out.println("19-24: "+ages[1]/people+" %");
		System.out.println("25-35: "+ages[2]/people+" %");
		System.out.println("36-50: "+ages[3]/people+" %");
		System.out.println("51-70: "+ages[4]/people+" %");
		System.out.println("71+: "+ages[5]/people+" %");
	}
	
	
	public static void main(String[] args) throws IOException {
	

	}

}

